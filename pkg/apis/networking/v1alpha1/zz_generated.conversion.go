// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by conversion-gen. DO NOT EDIT.

package v1alpha1

import (
	unsafe "unsafe"

	v1alpha1 "k8s.io/api/networking/v1alpha1"
	conversion "k8s.io/apimachinery/pkg/conversion"
	runtime "k8s.io/apimachinery/pkg/runtime"
	networking "k8s.io/kubernetes/pkg/apis/networking"
)

func init() {
	localSchemeBuilder.Register(RegisterConversions)
}

// RegisterConversions adds conversion functions to the given scheme.
// Public to allow building arbitrary schemes.
func RegisterConversions(s *runtime.Scheme) error {
	if err := s.AddGeneratedConversionFunc((*v1alpha1.DNSPolicy)(nil), (*networking.DNSPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_DNSPolicy_To_networking_DNSPolicy(a.(*v1alpha1.DNSPolicy), b.(*networking.DNSPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*networking.DNSPolicy)(nil), (*v1alpha1.DNSPolicy)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_networking_DNSPolicy_To_v1alpha1_DNSPolicy(a.(*networking.DNSPolicy), b.(*v1alpha1.DNSPolicy), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.DNSPolicyList)(nil), (*networking.DNSPolicyList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_DNSPolicyList_To_networking_DNSPolicyList(a.(*v1alpha1.DNSPolicyList), b.(*networking.DNSPolicyList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*networking.DNSPolicyList)(nil), (*v1alpha1.DNSPolicyList)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_networking_DNSPolicyList_To_v1alpha1_DNSPolicyList(a.(*networking.DNSPolicyList), b.(*v1alpha1.DNSPolicyList), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*v1alpha1.DNSPolicySpec)(nil), (*networking.DNSPolicySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec(a.(*v1alpha1.DNSPolicySpec), b.(*networking.DNSPolicySpec), scope)
	}); err != nil {
		return err
	}
	if err := s.AddGeneratedConversionFunc((*networking.DNSPolicySpec)(nil), (*v1alpha1.DNSPolicySpec)(nil), func(a, b interface{}, scope conversion.Scope) error {
		return Convert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec(a.(*networking.DNSPolicySpec), b.(*v1alpha1.DNSPolicySpec), scope)
	}); err != nil {
		return err
	}
	return nil
}

func autoConvert_v1alpha1_DNSPolicy_To_networking_DNSPolicy(in *v1alpha1.DNSPolicy, out *networking.DNSPolicy, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_v1alpha1_DNSPolicy_To_networking_DNSPolicy is an autogenerated conversion function.
func Convert_v1alpha1_DNSPolicy_To_networking_DNSPolicy(in *v1alpha1.DNSPolicy, out *networking.DNSPolicy, s conversion.Scope) error {
	return autoConvert_v1alpha1_DNSPolicy_To_networking_DNSPolicy(in, out, s)
}

func autoConvert_networking_DNSPolicy_To_v1alpha1_DNSPolicy(in *networking.DNSPolicy, out *v1alpha1.DNSPolicy, s conversion.Scope) error {
	out.ObjectMeta = in.ObjectMeta
	if err := Convert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec(&in.Spec, &out.Spec, s); err != nil {
		return err
	}
	return nil
}

// Convert_networking_DNSPolicy_To_v1alpha1_DNSPolicy is an autogenerated conversion function.
func Convert_networking_DNSPolicy_To_v1alpha1_DNSPolicy(in *networking.DNSPolicy, out *v1alpha1.DNSPolicy, s conversion.Scope) error {
	return autoConvert_networking_DNSPolicy_To_v1alpha1_DNSPolicy(in, out, s)
}

func autoConvert_v1alpha1_DNSPolicyList_To_networking_DNSPolicyList(in *v1alpha1.DNSPolicyList, out *networking.DNSPolicyList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]networking.DNSPolicy)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_v1alpha1_DNSPolicyList_To_networking_DNSPolicyList is an autogenerated conversion function.
func Convert_v1alpha1_DNSPolicyList_To_networking_DNSPolicyList(in *v1alpha1.DNSPolicyList, out *networking.DNSPolicyList, s conversion.Scope) error {
	return autoConvert_v1alpha1_DNSPolicyList_To_networking_DNSPolicyList(in, out, s)
}

func autoConvert_networking_DNSPolicyList_To_v1alpha1_DNSPolicyList(in *networking.DNSPolicyList, out *v1alpha1.DNSPolicyList, s conversion.Scope) error {
	out.ListMeta = in.ListMeta
	out.Items = *(*[]v1alpha1.DNSPolicy)(unsafe.Pointer(&in.Items))
	return nil
}

// Convert_networking_DNSPolicyList_To_v1alpha1_DNSPolicyList is an autogenerated conversion function.
func Convert_networking_DNSPolicyList_To_v1alpha1_DNSPolicyList(in *networking.DNSPolicyList, out *v1alpha1.DNSPolicyList, s conversion.Scope) error {
	return autoConvert_networking_DNSPolicyList_To_v1alpha1_DNSPolicyList(in, out, s)
}

func autoConvert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec(in *v1alpha1.DNSPolicySpec, out *networking.DNSPolicySpec, s conversion.Scope) error {
	out.PodSelector = in.PodSelector
	out.AllowedDomains = *(*[]string)(unsafe.Pointer(&in.AllowedDomains))
	return nil
}

// Convert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec is an autogenerated conversion function.
func Convert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec(in *v1alpha1.DNSPolicySpec, out *networking.DNSPolicySpec, s conversion.Scope) error {
	return autoConvert_v1alpha1_DNSPolicySpec_To_networking_DNSPolicySpec(in, out, s)
}

func autoConvert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec(in *networking.DNSPolicySpec, out *v1alpha1.DNSPolicySpec, s conversion.Scope) error {
	out.PodSelector = in.PodSelector
	out.AllowedDomains = *(*[]string)(unsafe.Pointer(&in.AllowedDomains))
	return nil
}

// Convert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec is an autogenerated conversion function.
func Convert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec(in *networking.DNSPolicySpec, out *v1alpha1.DNSPolicySpec, s conversion.Scope) error {
	return autoConvert_networking_DNSPolicySpec_To_v1alpha1_DNSPolicySpec(in, out, s)
}
