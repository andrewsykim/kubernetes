/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/networking/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DNSPolicyLister helps list DNSPolicies.
// All objects returned here must be treated as read-only.
type DNSPolicyLister interface {
	// List lists all DNSPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DNSPolicy, err error)
	// DNSPolicies returns an object that can list and get DNSPolicies.
	DNSPolicies(namespace string) DNSPolicyNamespaceLister
	DNSPolicyListerExpansion
}

// dNSPolicyLister implements the DNSPolicyLister interface.
type dNSPolicyLister struct {
	indexer cache.Indexer
}

// NewDNSPolicyLister returns a new DNSPolicyLister.
func NewDNSPolicyLister(indexer cache.Indexer) DNSPolicyLister {
	return &dNSPolicyLister{indexer: indexer}
}

// List lists all DNSPolicies in the indexer.
func (s *dNSPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.DNSPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNSPolicy))
	})
	return ret, err
}

// DNSPolicies returns an object that can list and get DNSPolicies.
func (s *dNSPolicyLister) DNSPolicies(namespace string) DNSPolicyNamespaceLister {
	return dNSPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DNSPolicyNamespaceLister helps list and get DNSPolicies.
// All objects returned here must be treated as read-only.
type DNSPolicyNamespaceLister interface {
	// List lists all DNSPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DNSPolicy, err error)
	// Get retrieves the DNSPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DNSPolicy, error)
	DNSPolicyNamespaceListerExpansion
}

// dNSPolicyNamespaceLister implements the DNSPolicyNamespaceLister
// interface.
type dNSPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DNSPolicies in the indexer for a given namespace.
func (s dNSPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DNSPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DNSPolicy))
	})
	return ret, err
}

// Get retrieves the DNSPolicy from the indexer for a given namespace and name.
func (s dNSPolicyNamespaceLister) Get(name string) (*v1alpha1.DNSPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dnspolicy"), name)
	}
	return obj.(*v1alpha1.DNSPolicy), nil
}
